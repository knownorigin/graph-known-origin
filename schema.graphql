########################
## Time series events ##
########################

# Generic activity stream events for history of actions including primary and secondary sales actions & triggers
# Used for listing out token history on the token pages
type TokenEvent @entity {
    id: ID!                     # Composite key made form multiple items
    version: BigInt!            # KODA 2 or 3
    name: String!
    token: Token!
    edition: Edition!
    buyer: Collector
    bidder: Collector
    currentOwner: Collector
    ethValue: BigDecimal!

    # Common event details
    timestamp: BigInt!
    transactionHash: Bytes!
    transactionIndex: BigInt!
    logIndex: BigInt!
    eventAddress: Bytes!
    eventTxFrom: Bytes!
    eventTxTo: Bytes
    blockNumber: BigInt!
}

# Token events for transfers
type TransferEvent @entity {
    id: ID!
    version: BigInt! # KODA 2 or 3
    from: Bytes! # address
    to: Bytes! # address
    tokenId: BigInt!
    edition: Edition!

    # Common event details
    timestamp: BigInt!
    transactionHash: Bytes!
    transactionIndex: BigInt!
    logIndex: BigInt!
    eventAddress: Bytes!
    eventTxFrom: Bytes!
    eventTxTo: Bytes
    blockNumber: BigInt!
}

# Edition primary sale auction events
type AuctionEvent @entity {
    id: ID!
    version: BigInt! # KODA 2 or 3
    edition: Edition!
    name: String!
    bidder: Bytes!
    caller: Bytes!
    ethValue: BigDecimal!
    lockupUntil: BigInt # when set the bidder who set this is locked out

    # Common event details
    timestamp: BigInt!
    transactionHash: Bytes!
    transactionIndex: BigInt!
    logIndex: BigInt!
    eventAddress: Bytes!
    eventTxFrom: Bytes!
    eventTxTo: Bytes
    blockNumber: BigInt!
}

# Common unified event stream spanning KODA versions and various types
type ActivityEvent @entity {
    id: ID!
    type: String!               # Token or Edition
    version: BigInt!            # KODA 2 or 3
    eventType: String!          # Event types e.g. ['EditionCreated', 'Purchase', 'BidPlaced', 'BidAccepted', 'BidIncreased', 'BidRejected', 'BidWithdrawn']
    edition: Edition!           # All events relate to an edition
    token: Token                # (nullable) the token this relates to
    # accounts
    creator: Bytes!             # the original edition creator
    creatorCommission: BigInt!  # % received as creator - only valid is event has value
    collaborator: Bytes        # (nullable) the original edition creator collaborator
    collaboratorCommission: BigInt # (nullable) % received as creator - only valid is event has value
    triggeredBy: Bytes!         # who fired the transaction
    buyer: Bytes                # (nullable) the buyer
    seller: Bytes               # (nullable) the seller
    stakeholderAddresses: [Bytes!]!     # the addresses that interacted during the event

    # technicals
    eventValueInWei: BigInt     # (nullable) the WEI value

    # Common event details
    timestamp: BigInt!
    transactionHash: Bytes!
    transactionIndex: BigInt!
    logIndex: BigInt!
    eventAddress: Bytes!
    eventTxFrom: Bytes!
    eventTxTo: Bytes
    blockNumber: BigInt!
}

#######################
## Free-text schemas ##
#######################

type _Schema_
@fulltext(
    name: "listedTokenSearch",
    language: en
    algorithm: rank,
    include: [
        {
            entity: "ListedToken",
            fields: [
                { name: "metadataName" },
                { name: "metadataArtist" },
                { name: "metadataArtistAccount" },
                { name: "metadataTagString" },
                { name: "primaryAssetShortType" },
                { name: "primaryAssetActualType" },
            ]
        }
    ]
)
@fulltext(
    name: "editionSearch",
    language: en
    algorithm: rank,
    include: [
        {
            entity: "Edition",
            fields: [
                { name: "metadataName" },
                { name: "metadataArtist" },
                { name: "metadataArtistAccount" },
                { name: "metadataTagString" },
                { name: "metadataFormat" },
                { name: "metadataTheme" },
                { name: "primaryAssetShortType" },
                { name: "primaryAssetActualType" },
            ]
        }
    ]
)

####################################################################################
## Main entities                                                                  ##
## All entities below are NOT event based but are updated from a stream of events ##
####################################################################################

# Rolled up counts for a given day
type Day @entity {
    id: ID!
    date: String!
    transferCount: BigInt!
    editionsCount: BigInt!

    # Bid/offer counts and values (primary & secondary)
    bidsAcceptedCount: BigInt! # Offers accepted
    bidsPlacedCount: BigInt! # Offers made
    bidsRejectedCount: BigInt! # Offers reject
    bidsWithdrawnCount: BigInt!
    bidsIncreasedCount: BigInt!
    totalValuePlaceInBids: BigDecimal!
    totalValueCycledInBids: BigDecimal!

    # Secondary sales value in ETH today
    secondarySalesValue: BigDecimal!

    # Sales/gifting counts and values
    issuedCount: BigInt!
    salesCount: BigInt!

    totalValueInEth: BigDecimal!
    highestValueInEth: BigDecimal!
    highestValueToken: Token

    issued: [Token!]!
    editions: [Edition!]!
}

# N.B: Only for V3 atm
type PlatformConfig @entity {
    id: ID!

    # NFT
    royaltiesRegistry: Bytes # address
    tokenUriResolver: Bytes # address

    # Marketplace
    modulo: BigInt
    primarySaleCommission: BigInt
    secondarySaleRoyalty: BigInt
    marketplaceSecondarySaleRoyalty: BigInt
    minBidAmount: BigInt

    # Minting factory
    mintingPeriod: BigInt  # Minting allowance period
    maxMintsInPeriod: BigInt # Limit of mints with in the period

    # Access controls
    merkleProofRoot: Bytes
    merkleProofIpfsHash: String
}

# A token and its details
type Token @entity {
    id: ID!
    version: BigInt! # KODA 2 or 3
    salesType: BigInt! # The current sales mechanic being used on this edition
    tokenId: BigInt!
    transferCount: BigInt!
    editionNumber: BigInt!
    edition: Edition!
    tokenURI: String!
    metadata: MetaData
    birthTimestamp: BigInt!                 # initial transfer from zero address
    primaryValueInEth: BigDecimal!          # when it sold from an edition on KO
    totalPurchaseValue: BigDecimal!         # tally of all purchases (primary & secondary)
    totalPurchaseCount: BigInt!             # tally of the number of purchases (primary & secondary)
    largestSecondaryValueInEth: BigDecimal! # largest secondary sale in ETH
    largestSalePriceEth: BigDecimal!        # set to the highest sale price for the token, primary or secondary
    lastSalePriceInEth: BigDecimal!         # known last sale if we capture it (primary & secondary)
    lastTransferTimestamp: BigInt!          # updated on ever Transfer
    currentOwner: Collector                 # the current owner - also has a derived field linking to this from Collector.tokens
    allOwners: [Collector!]!                # list (set) of all unique owners
    transfers: [TransferEvent!]!            # total number of token transfers made
    tokenEvents: [TokenEvent!]!             # list of token events such as secondary sales and transfers
    openOffer: TokenOffer,                  # current top active offer on a token
    currentTopBidder: Bytes                 # current active top bidder on the secondary market for this token
    artistAccount: Bytes! # address
    editionActive: Boolean!

    revokedApproval: Boolean! # set to true once if the seller has revoked approved the marketplace

    ## Token secondary market
    isListed: Boolean!
    listPrice: BigDecimal
    lister: Collector
    listingTimestamp: BigInt

    # Complete attached token
    listing: ListedToken
}

# For Token Secondary market
type ListedToken @entity {
    id: ID!
    version: BigInt! # KODA 2 or 3

    editionNumber: BigInt!
    revokedApproval: Boolean! # set to true once if the seller has revoked approved the marketplace

    listPrice: BigDecimal!
    lister: Collector!
    listingTimestamp: BigInt!
    seriesNumber: BigInt # i.e. edition no. in the series i.e. #10 from the an edition of 10
    isFirstEdition: Boolean # i.e. token number 1 from edition of 10
    isLastEdition: Boolean # i.e. token number 10 from edition of 10
    isGenesisEdition: Boolean # i.e. the first artwork from an artist

    #metadata fields flattened for search
    metadataName: String!
    metadataArtist: String!
    metadataArtistAccount: String!
    metadataTagString: String!
    primaryAssetShortType: String!
    primaryAssetActualType: String!

    # Complete attached token
    fullToken: Token!

    # TODO handle start date from V3 on secondary

    # ---- Reserve auction fields --------- #
    reserveAuctionSeller: Bytes!     # edition seller
    reserveAuctionBidder: Bytes!     # current bidder
    reservePrice: BigInt!            # listed reserve price
    reserveAuctionBid: BigInt!       # current bid
    reserveAuctionStartDate: BigInt! # auction start

    previousReserveAuctionEndTimestamp: BigInt! # set to the same as reserve unless an extension is in flight
    reserveAuctionEndTimestamp: BigInt!         # when the auction will end
    reserveAuctionNumTimesExtended: BigInt!     # number of times auction has been extended
    isReserveAuctionInSuddenDeath: Boolean!     # set to true when in sudden death
    reserveAuctionTotalExtensionLengthInSeconds: BigInt! # total extension

    isReserveAuctionResulted: Boolean!
    isReserveAuctionResultedDateTime: BigInt!
    reserveAuctionResulter: Bytes!

    reserveAuctionCanEmergencyExit: Boolean!
    # ----- End of reserve auction fields - #
}

# A composable is a combination of a V3 NFT and a set number of tokens
type Composable @entity {
    id: ID! # toString for address
    items: [ComposableItem!]  # An array of composable items
}

# ComposableItem represents one token attached to a composable
type ComposableItem @entity {
    id: ID! # ID made up of combined tokenID/composing contract/composing IDs
    address: String! # Address of the ERC20/ERC721 token
    tokenID: String! # ID of the token
    type: String! # Type of token, ERC20, ERC721 etc
    value: BigInt! # Number of tokens attached or the ERC721 token ID
}

# Maintain an list of approved collective handlers i.e. contracts which are cloned and used
type CollectiveHandlers @entity {
    id: ID! # base address
    active: Boolean!
    lastUpdatedTimestamp: BigInt!
    lastUpdatedTransactionHash: Bytes!
}

type Collective @entity {
    id: ID! # deployed address
    baseHandler: Bytes! # clone which this is based on
    creator: Bytes! # who deployed it
    recipients: [Bytes!]! # recipients for the deployed collab
    splits: [BigInt!]! # splits for the deployed collab
    createdTimestamp: BigInt!
    transactionHash: Bytes!
    editions: [Edition!]! # A list of editions assigned to
    isDeployed: Boolean!
}

# A token/editions and its meta data
type Edition @entity {
    id: ID!
    version: BigInt! # KODA 2 or 3 or 4
    editionNmber: BigInt! # edition no. as Bigint
    editionType: BigInt!
    editionData: Bytes # bytes32 - some data about the edition
    editionContract: Bytes # address of non shared contract that minted the edition

    salesType: BigInt! # The current sales mechanic being used on this edition
    revokedApproval: Boolean! # set to true once if the seller has revoked approved the marketplace

    createdTimestamp: BigInt!
    tokenIds: [BigInt!]!
    tokens: [Token!]! @derivedFrom(field: "edition")

    tokenURI: String!
    artistAccount: Bytes! # address
    artistCommission: BigInt! # base artists commission
    optionalCommissionAccount: Bytes # address - NOTE: deprecated - V2 only - use collaborators for
    optionalCommissionRate: BigInt
    collaborators: [Bytes!]! # list of addresses who have collaborated on this edition
    collective: Collective # nullable V3 collective i.e. its split funds
    offersOnly: Boolean!

    # Token counters
    totalSupply: BigInt!         # Total purchases or mints i.e. total number of primary transfers
    totalAvailable: BigInt!      # Total number available to be purchased i.e. edition size
    remainingSupply: BigInt!     # Total remaining i.e. number of primary sale tokens left to buy from this edition
    totalSold: BigInt!           # sold = purchase/bid accepted with price > 0
    totalBurnt: BigInt!          # number of items send to 0xDead or 0x0 (only applicable for V3)
    originalEditionSize: BigInt! # original edition size of the edition at mint - this field should NEVER change once set

    secondaryRoyaltyV4EditionOverride: BigInt

    sales: [Token!]!
    totalEthSpentOnEdition: BigDecimal!,
    active: Boolean!
    metadata: MetaData
    isGenesisEdition: Boolean! # set true if edition is an artists first edition
    isEnhancedEdition: Boolean! # set true if any of the tokens are enhanced i.e. composed
    hasCoverImage: Boolean! # set to true if non-image asset with cover image

    # Reference to the primary minter
    artist: Artist

    # date when the edition goes on sale
    startDate: BigInt!
    endDate: BigInt!   # date when the edition is available until (only applicable for V2)

    # ---- Reserve auction fields --------- #
    reserveAuctionSeller: Bytes!     # edition seller
    reserveAuctionBidder: Bytes!     # current bidder
    reservePrice: BigInt!            # listed reserve price
    reserveAuctionBid: BigInt!       # current bid
    reserveAuctionStartDate: BigInt! # auction start

    previousReserveAuctionEndTimestamp: BigInt! # set to the same as reserve unless an extension is in flight
    reserveAuctionEndTimestamp: BigInt!         # when the auction will end
    reserveAuctionNumTimesExtended: BigInt!     # number of times auction has been extended
    isReserveAuctionInSuddenDeath: Boolean!     # set to true when in sudden death
    reserveAuctionTotalExtensionLengthInSeconds: BigInt! # total extension

    isReserveAuctionResulted: Boolean!
    isReserveAuctionResultedDateTime: BigInt!
    reserveAuctionResulter: Bytes!

    reserveAuctionCanEmergencyExit: Boolean!
    # ----- End of reserve auction fields - #

    # ----- Buy now price / current step price - #
    priceInWei: BigInt!
    # ----- Buy now price / current step price - #

    # ----- step sale - #
    stepSaleBasePrice: BigInt!
    stepSaleStepPrice: BigInt!
    currentStep: BigInt!
    # ----- step sale - #

    # ----- Offers logic - #
    auctionEnabled: Boolean!
    activeBid: AuctionEvent # if present, an active bid should be open
    # ----- Offers logic - #

    # ----- Gated sale config - #
    gatedSale: GatedSale        # the linked gated sale
    # ----- Gated sale config - #

    # Events and histories
    biddingHistory: [AuctionEvent!]!
    transfers: [TransferEvent!]! # total number of token transfers made for all tokens from the edition
    allOwners: [Collector]! # list (set) of all unique owners for all tokens
    currentOwners: [Collector!]! # Current set of owners for this edition
    primaryOwners: [Collector!]! # Owners (set) when sold in primary sale

    # START: freetext search fields
    metadataName: String!
    metadataArtist: String!
    metadataTagString: String!
    metadataArtistAccount: String!
    metadataPrice: BigInt! # A consolidated price for all sale types, making it orderable in lists
    metadataFormat: String # null-able as V3 only
    metadataTheme: String # null-able as V3 only
    primaryAssetShortType: String # null-able leading mime-type field i.e. image or video etc
    primaryAssetActualType: String # null-able ending mime-type field e.g. mp4, gif, png etc
    # END: freetext search fields
}

# A token/editions and its meta data
type MetaData @entity {
    id: ID!
    name: String
    description: String

    image: String
    # only added july-2020
    image_type: String
    image_size_in_bytes: BigInt

    # optional - only added july-2020
    cover_image: String
    cover_image_type: String
    cover_image_size_in_bytes: BigInt
    animation_url: String

    # optional - only added Jan-21
    image_sphere: Boolean

    scarcity: String
    artist: String
    tags: [String!]

    # New tags added in V3
    production_year: String
    format: String
    theme: String
    nsfw: Boolean
}

# Single high level entity capturing the top offer on the secondary marketplace
type TokenOffer @entity {
    id: ID!
    version: BigInt! # KODA 2 or 3
    token: Token!
    edition: Edition!
    ownerAtTimeOfBid: Collector!
    bidder: Collector!
    ethValue: BigDecimal!
    timestamp: BigInt!
}

# Encapsulates all offers either on editions or tokens
type Offer @entity {
    id: ID!                         # edition ID or token ID
    version: BigInt!                # KODA 2 or 3
    type: String!                   # either Token or Edition
    salesType: BigInt!              # The current sales mechnic being used on this offer
    token: Token                    # nullable token, as editions dont have tokens attached
    edition: Edition!               # All offers must be from an edition
    currentOwner: Collector!        # This is either the token holder or the edition artist
    bidder: Collector!              # Who is making the bid
    ethValue: BigDecimal!
    weiValue: BigInt!
    timestamp: BigInt!
    transactionHash: Bytes!
    lockedUntil: BigInt             # For V3 offers, they will be locked for a certain amount of time
    isActive: Boolean!              # Only active offers can be seen in the UI
}

# Store the total mints per user, per sale & phase
type PhaseMintCount @entity {
    id: ID!                  # composite key (sale, edition, phase, minter) - unique per user and sale/phase
    saleId: String!          # The sale this phase relates to
    editionId: String!       # The edition this phase relates to
    phaseId: String!         # The actual phase number
    minter: String!          # The minter
    count: BigInt!           # How many have they minted
}

# A gate sale phase configuration
type Phase @entity {
    id: ID!
    saleId: String!          # The sale this phase relates to
    editionId: String!       # The edition this phase relates to
    phaseId: String!         # The actual phase number
    startTime: BigInt!       # The start time of the sale as a whole
    endTime: BigInt!         # The end time of the sale phase, also the beginning of the next phase if applicable
    walletMintLimit: BigInt! # The mint limit per wallet for the phase
    priceInWei: BigInt!      # Price in wei for one mint
    mintCap: BigInt!         # The maximum amount of mints for the phase
    mintCount: BigInt!       # The current amount of items minted in this phase
    merkleRoot: Bytes        # The merkle tree root for the phase
    merkleIPFSHash: String   # The IPFS hash referencing the merkle tree
}

# A gate sale configuration - one per edition
type GatedSale @entity {
    id: ID!                 # The ID of the sale
    editionId: BigInt!      # The ID of the edition the sale will mint
    paused: Boolean!        # Whether the sale is currently paused
    primarySaleCommission: BigInt! # overridden sales commission for KO
    artistAccount: String   # The address of the artist associated with the given edition ID
    mintCount: BigInt!      # The total mint current for the sale
    phases: [Phase!]!       # associated sales
}

# Any KODA V4 Contract Deployed from the V4 factory
type CreatorContract @entity {
    id: ID!

    # Deployment information
    deploymentBlockNumber: BigInt!
    deploymentTimestamp: BigInt!
    implementation: Bytes!
    deployer: Bytes!
    creator: Bytes!

    # Current Settings
    paused: Boolean!
    owner: Bytes!
    secondaryRoyaltyPercentage: BigInt!
    minter: Bytes!

    # Funds handler
    defaultFundsHandler: Bytes!
    defaultFundsRecipients: [Bytes!]!
    defaultFundsShares: [BigInt!]!

    # Interface ID
    ERC165InterfaceID: Bytes
    isBatchBuyItNow: Boolean!

    # banned - flagged by the creator contract factory
    isHidden: Boolean!

    # Global stats
    totalNumOfEditions: BigInt!
    totalNumOfTokensSold: BigInt!
    totalNumOfTransfers: BigInt!

    # Editions created by contract
    editions: [Edition!]!
}

##########################
## Accountable entities ##
##########################

type ArtistMintingConfig @entity {
    id: ID!
    mints: BigInt!
    firstMintInPeriod: BigInt!
    frequencyOverride: Boolean! # set to true if the user can mint as much as possible
}

# An artists who has created editions/tokens
type Artist @entity {
    id: ID!

    address: Bytes! # address
    name: String

    editionsCount: BigInt!

    supply: BigInt!

    issuedCount: BigInt!

    totalValueInEth: BigDecimal!
    salesCount: BigInt!

    totalPrimarySales: BigInt!
    totalPrimarySalesInEth: BigDecimal!

    totalSecondarySales: BigInt!
    totalSecondarySalesInEth: BigDecimal!

    highestSaleValueInEth: BigDecimal!
    highestSaleToken: Token

    firstEdition: Edition
    firstEditionTimestamp: BigInt!

    lastEdition: Edition
    lastEditionTimestamp: BigInt!

    # all artist editions - derivedFrom only work at query time, not runtime!
    editions: [Edition!]! @derivedFrom(field: "artist")
    editionIds: [Edition!]!

    mintingConfig: ArtistMintingConfig!

    creatorContracts: [CreatorContract!]!
}

# A single collector who has at sometime held a KO asset
type Collector @entity {
    id: ID! # toString for address
    address: Bytes! # address

    firstSeen: BigInt!
    firstPurchaseTimeStamp: BigInt!
    lastPurchaseTimeStamp: BigInt!

    # Primary sales counts
    primaryPurchaseCount: BigInt!
    primaryPurchaseEthSpent: BigDecimal!

    # Secondary sales counts
    secondarySaleCount: BigInt!
    secondarySaleEthTotal: BigDecimal!
    secondaryPurchaseCount: BigInt!
    secondaryPurchaseEthSpent: BigDecimal!

    # Primary & secondary sales counts
    totalPurchaseCount: BigInt!
    totalPurchaseEthSpent: BigDecimal!

    # all tokens currently owned by this account - derivedFrom only work at query time, not runtime!
    tokens: [Token!]! @derivedFrom(field: "currentOwner")
    tokenIds: [Token!]!
}
