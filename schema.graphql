#######################
## Timeseries events ##
#######################

# Token events for history of actions including secodnary sales actions
type TokenEvent @entity {
    id: ID!
    name: String!
    token: Token!
    edition: Edition!
    bidder: Collector
    currentOwner: Collector
    ethValue: BigDecimal!
    timestamp: BigInt!
}

# Token events for transfers
type TransferEvent @entity {
    id: ID!
    from: Bytes! # address
    to: Bytes! # address
    tokenId: BigInt!
    timestamp: BigInt!
}

# Edition primary sale auction events
type AuctionEvent @entity {
    id: ID!
    edition: Edition!
    name: String!
    bidder: Bytes!
    caller: Bytes!
    timestamp: BigInt!
    ethValue: BigDecimal!
}

# Rolled up counts for a given day
type Day @entity {
    id: ID!
    date: String!
    transferCount: BigInt!
    editionsCount: BigInt!

    # Bid/offer counts and values
    bidsAcceptedCount: BigInt!
    bidsPlacedCount: BigInt!
    bidsRejectedCount: BigInt!
    bidsWithdrawnCount: BigInt!
    bidsIncreasedCount: BigInt!
    totalValuePlaceInBids: BigDecimal!
    totalValueCycledInBids: BigDecimal!

    # Sales/gifting counts and values
    issuedCount: BigInt!
    salesCount: BigInt!

    totalValueInEth: BigDecimal!
    highestValueInEth: BigDecimal!
    highestValueToken: Token

    issued: [Token!]!
    editions: [Edition!]!
}

###################
## Main entities ##
###################

# A token and its details
type Token @entity {
    id: ID!
    tokenId: BigInt!
    transferCount: BigInt!
    editionNumber: BigInt!
    tokenURI: String!
    metadata: MetaData!
    birthTimestamp: BigInt!
    primaryValueInEth: BigDecimal!
    lastTransferTimestamp: BigInt!

    currentOwner: Collector!            # the current owner
    allOwners: [Collector]!             # list (set) of all unique owners
    transfers: [TransferEvent!]!        # total number of token transfers made
    tokenEvents: [TokenEvent!]!         # list of token events siuch as secondary sales and transfers
    openOffer: TokenOffer,              # current top active offer on a token
    currentTopBiider: Bytes             # current active top bidder on the secondary market for this token
}

# A token/editions and its meta data
type Edition @entity {
    id: ID!
    editionType: BigInt!
    editionData: Bytes # bytes32
    startDate: BigInt!
    endDate: BigInt!
    createdTimestamp: BigInt!
    tokenIds: [BigInt!]!
    tokenURI: String!
    artistAccount: Bytes! # address
    artistCommission: BigInt!
    optionalCommissionAccount: Bytes # address
    optionalCommissionRate: BigInt
    priceInWei: BigInt!
    totalSupply: BigInt!
    totalAvailable: BigInt!
    totalSold: BigInt! # sold = purchase/bid accepted with price > 0
    sales: [Token!]!
    #gifts: [Token!]! - can we work this out by subtracting sales against issued token numbers, difference is the gifted amount
    totalEthSpentOnEdition: BigDecimal!,
    active: Boolean!
    metadata: MetaData
    auctionEnabled: Boolean!
    activeBid: AuctionEvent # if present, an active bid should be open
    biddingHistory: [AuctionEvent!]!
    transfers: [TransferEvent!]! # total number of token transfers made for all tokens from the edition
    allOwners: [Collector]! # list (set) of all unique owners for all tokens
    currentOwners: [Collector]! # TODO Current (set) owners at this point in time
    primaryOwners: [Collector]! # Owners (set) when sold in primary sale
}

# A token/editions and its meta data
type MetaData @entity {
    id: ID!
    name: String
    description: String
    image: String
    scarcity: String
    artist: String
    tags: [String!]
}

# Single high level entity capturing the top offer on the secondary marketplace
type TokenOffer @entity {
    id: ID!
    token: Token!
    edition: Edition!
    ownerAtTimeOfBid: Collector!
    bidder: Collector!
    ethValue: BigDecimal!
    timestamp: BigInt!
}

##########################
## Accountable entities ##
##########################

# An artists who has created editions/tokens
type Artist @entity {
    id: ID!

    address: Bytes! # address
    name: String

    editionsCount: BigInt!

    supply: BigInt!

    issuedCount: BigInt!
    salesCount: BigInt!

    totalValueInEth: BigDecimal!

    highestSaleValueInEth: BigDecimal!
    highestSaleToken: Token

    firstEdition: Edition
    firstEditionTimestamp: BigInt!

    lastEdition: Edition
    lastEditionTimestamp: BigInt!

    # FIXME handle secondary sales payments
}

# A single collector who has at sometime held a KO asset
type Collector @entity {
    id: ID! # toString for address
    address: Bytes! # address
    firstSeen: BigInt!

    firstPurchaseTimeStamp: BigInt!
    lastPurchaseTimeStamp: BigInt!

    # Primary sales counts
    primarySaleCount: BigInt!
    primarySaleEthSpent: BigInt!

    #    primarySaleTokensPurchased: [Token!]!
    #    primarySaleEditionsPurchased: [Edition!]!

    # TODO Counts for any type of ownership
    #    tokenIdsPurchased: [BigInt!]!
    #    lastPurchaseTimeStamp: BigInt!
    #    tokenIdsCurrentlyOwned: [BigInt!]!
    #    totalSpendInEth: BigDecimal!
    #    totalTransfer - can we already work this out?
    #    purchase history - can we work this out already?
    #    biddingHistory: [AuctionEvent!]!
}
