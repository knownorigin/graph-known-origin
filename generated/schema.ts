// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Token entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Token entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Token", id.toString(), this);
  }

  static load(id: string): Token | null {
    return store.get("Token", id) as Token | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get to(): Bytes {
    let value = this.get("to");
    return value.toBytes();
  }

  set to(value: Bytes) {
    this.set("to", Value.fromBytes(value));
  }

  get ownerCount(): BigInt {
    let value = this.get("ownerCount");
    return value.toBigInt();
  }

  set ownerCount(value: BigInt) {
    this.set("ownerCount", Value.fromBigInt(value));
  }

  get editionNumber(): BigInt {
    let value = this.get("editionNumber");
    return value.toBigInt();
  }

  set editionNumber(value: BigInt) {
    this.set("editionNumber", Value.fromBigInt(value));
  }

  get tokenURI(): string {
    let value = this.get("tokenURI");
    return value.toString();
  }

  set tokenURI(value: string) {
    this.set("tokenURI", Value.fromString(value));
  }

  get highestValue(): BigInt {
    let value = this.get("highestValue");
    return value.toBigInt();
  }

  set highestValue(value: BigInt) {
    this.set("highestValue", Value.fromBigInt(value));
  }

  get highestValueInEth(): BigDecimal {
    let value = this.get("highestValueInEth");
    return value.toBigDecimal();
  }

  set highestValueInEth(value: BigDecimal) {
    this.set("highestValueInEth", Value.fromBigDecimal(value));
  }

  get name(): string | null {
    let value = this.get("name");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set name(value: string | null) {
    if (value === null) {
      this.unset("name");
    } else {
      this.set("name", Value.fromString(value as string));
    }
  }

  get description(): string | null {
    let value = this.get("description");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set description(value: string | null) {
    if (value === null) {
      this.unset("description");
    } else {
      this.set("description", Value.fromString(value as string));
    }
  }

  get image(): string | null {
    let value = this.get("image");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set image(value: string | null) {
    if (value === null) {
      this.unset("image");
    } else {
      this.set("image", Value.fromString(value as string));
    }
  }
}

export class Day extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Day entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Day entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Day", id.toString(), this);
  }

  static load(id: string): Day | null {
    return store.get("Day", id) as Day | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get date(): string {
    let value = this.get("date");
    return value.toString();
  }

  set date(value: string) {
    this.set("date", Value.fromString(value));
  }

  get transferCount(): BigInt {
    let value = this.get("transferCount");
    return value.toBigInt();
  }

  set transferCount(value: BigInt) {
    this.set("transferCount", Value.fromBigInt(value));
  }

  get totalValue(): BigInt {
    let value = this.get("totalValue");
    return value.toBigInt();
  }

  set totalValue(value: BigInt) {
    this.set("totalValue", Value.fromBigInt(value));
  }

  get totalValueInEth(): BigDecimal {
    let value = this.get("totalValueInEth");
    return value.toBigDecimal();
  }

  set totalValueInEth(value: BigDecimal) {
    this.set("totalValueInEth", Value.fromBigDecimal(value));
  }

  get totalGasUsed(): BigInt {
    let value = this.get("totalGasUsed");
    return value.toBigInt();
  }

  set totalGasUsed(value: BigInt) {
    this.set("totalGasUsed", Value.fromBigInt(value));
  }

  get highestValue(): BigInt {
    let value = this.get("highestValue");
    return value.toBigInt();
  }

  set highestValue(value: BigInt) {
    this.set("highestValue", Value.fromBigInt(value));
  }

  get highestValueInEth(): BigDecimal {
    let value = this.get("highestValueInEth");
    return value.toBigDecimal();
  }

  set highestValueInEth(value: BigDecimal) {
    this.set("highestValueInEth", Value.fromBigDecimal(value));
  }

  get highestValueToken(): string | null {
    let value = this.get("highestValueToken");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set highestValueToken(value: string | null) {
    if (value === null) {
      this.unset("highestValueToken");
    } else {
      this.set("highestValueToken", Value.fromString(value as string));
    }
  }

  get highestGasPrice(): BigInt {
    let value = this.get("highestGasPrice");
    return value.toBigInt();
  }

  set highestGasPrice(value: BigInt) {
    this.set("highestGasPrice", Value.fromBigInt(value));
  }

  get sales(): Array<string> {
    let value = this.get("sales");
    return value.toStringArray();
  }

  set sales(value: Array<string>) {
    this.set("sales", Value.fromStringArray(value));
  }

  get editions(): Array<string> {
    let value = this.get("editions");
    return value.toStringArray();
  }

  set editions(value: Array<string>) {
    this.set("editions", Value.fromStringArray(value));
  }
}

export class Month extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Month entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Month entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Month", id.toString(), this);
  }

  static load(id: string): Month | null {
    return store.get("Month", id) as Month | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get date(): string {
    let value = this.get("date");
    return value.toString();
  }

  set date(value: string) {
    this.set("date", Value.fromString(value));
  }

  get transferCount(): BigInt {
    let value = this.get("transferCount");
    return value.toBigInt();
  }

  set transferCount(value: BigInt) {
    this.set("transferCount", Value.fromBigInt(value));
  }

  get totalValue(): BigInt {
    let value = this.get("totalValue");
    return value.toBigInt();
  }

  set totalValue(value: BigInt) {
    this.set("totalValue", Value.fromBigInt(value));
  }

  get totalValueInEth(): BigDecimal {
    let value = this.get("totalValueInEth");
    return value.toBigDecimal();
  }

  set totalValueInEth(value: BigDecimal) {
    this.set("totalValueInEth", Value.fromBigDecimal(value));
  }

  get highestValue(): BigInt {
    let value = this.get("highestValue");
    return value.toBigInt();
  }

  set highestValue(value: BigInt) {
    this.set("highestValue", Value.fromBigInt(value));
  }

  get highestValueInEth(): BigDecimal {
    let value = this.get("highestValueInEth");
    return value.toBigDecimal();
  }

  set highestValueInEth(value: BigDecimal) {
    this.set("highestValueInEth", Value.fromBigDecimal(value));
  }

  get highestValueToken(): string | null {
    let value = this.get("highestValueToken");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set highestValueToken(value: string | null) {
    if (value === null) {
      this.unset("highestValueToken");
    } else {
      this.set("highestValueToken", Value.fromString(value as string));
    }
  }
}

export class MetaData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save MetaData entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save MetaData entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("MetaData", id.toString(), this);
  }

  static load(id: string): MetaData | null {
    return store.get("MetaData", id) as MetaData | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string | null {
    let value = this.get("name");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set name(value: string | null) {
    if (value === null) {
      this.unset("name");
    } else {
      this.set("name", Value.fromString(value as string));
    }
  }

  get description(): string | null {
    let value = this.get("description");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set description(value: string | null) {
    if (value === null) {
      this.unset("description");
    } else {
      this.set("description", Value.fromString(value as string));
    }
  }

  get image(): string | null {
    let value = this.get("image");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set image(value: string | null) {
    if (value === null) {
      this.unset("image");
    } else {
      this.set("image", Value.fromString(value as string));
    }
  }

  get scarcity(): string | null {
    let value = this.get("scarcity");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set scarcity(value: string | null) {
    if (value === null) {
      this.unset("scarcity");
    } else {
      this.set("scarcity", Value.fromString(value as string));
    }
  }

  get artist(): string | null {
    let value = this.get("artist");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set artist(value: string | null) {
    if (value === null) {
      this.unset("artist");
    } else {
      this.set("artist", Value.fromString(value as string));
    }
  }

  get tags(): Array<string> | null {
    let value = this.get("tags");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set tags(value: Array<string> | null) {
    if (value === null) {
      this.unset("tags");
    } else {
      this.set("tags", Value.fromStringArray(value as Array<string>));
    }
  }
}

export class Edition extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Edition entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Edition entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Edition", id.toString(), this);
  }

  static load(id: string): Edition | null {
    return store.get("Edition", id) as Edition | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get editionType(): BigInt {
    let value = this.get("editionType");
    return value.toBigInt();
  }

  set editionType(value: BigInt) {
    this.set("editionType", Value.fromBigInt(value));
  }

  get editionData(): Bytes {
    let value = this.get("editionData");
    return value.toBytes();
  }

  set editionData(value: Bytes) {
    this.set("editionData", Value.fromBytes(value));
  }

  get startDate(): BigInt {
    let value = this.get("startDate");
    return value.toBigInt();
  }

  set startDate(value: BigInt) {
    this.set("startDate", Value.fromBigInt(value));
  }

  get endDate(): BigInt {
    let value = this.get("endDate");
    return value.toBigInt();
  }

  set endDate(value: BigInt) {
    this.set("endDate", Value.fromBigInt(value));
  }

  get createdTimestamp(): BigInt {
    let value = this.get("createdTimestamp");
    return value.toBigInt();
  }

  set createdTimestamp(value: BigInt) {
    this.set("createdTimestamp", Value.fromBigInt(value));
  }

  get tokenIds(): Array<BigInt> {
    let value = this.get("tokenIds");
    return value.toBigIntArray();
  }

  set tokenIds(value: Array<BigInt>) {
    this.set("tokenIds", Value.fromBigIntArray(value));
  }

  get tokenURI(): string {
    let value = this.get("tokenURI");
    return value.toString();
  }

  set tokenURI(value: string) {
    this.set("tokenURI", Value.fromString(value));
  }

  get artistAccount(): Bytes {
    let value = this.get("artistAccount");
    return value.toBytes();
  }

  set artistAccount(value: Bytes) {
    this.set("artistAccount", Value.fromBytes(value));
  }

  get artistCommission(): BigInt {
    let value = this.get("artistCommission");
    return value.toBigInt();
  }

  set artistCommission(value: BigInt) {
    this.set("artistCommission", Value.fromBigInt(value));
  }

  get priceInWei(): BigInt {
    let value = this.get("priceInWei");
    return value.toBigInt();
  }

  set priceInWei(value: BigInt) {
    this.set("priceInWei", Value.fromBigInt(value));
  }

  get totalSupply(): BigInt {
    let value = this.get("totalSupply");
    return value.toBigInt();
  }

  set totalSupply(value: BigInt) {
    this.set("totalSupply", Value.fromBigInt(value));
  }

  get totalAvailable(): BigInt {
    let value = this.get("totalAvailable");
    return value.toBigInt();
  }

  set totalAvailable(value: BigInt) {
    this.set("totalAvailable", Value.fromBigInt(value));
  }

  get active(): boolean {
    let value = this.get("active");
    return value.toBoolean();
  }

  set active(value: boolean) {
    this.set("active", Value.fromBoolean(value));
  }

  get metadata(): string {
    let value = this.get("metadata");
    return value.toString();
  }

  set metadata(value: string) {
    this.set("metadata", Value.fromString(value));
  }

  get auctionEnabled(): boolean {
    let value = this.get("auctionEnabled");
    return value.toBoolean();
  }

  set auctionEnabled(value: boolean) {
    this.set("auctionEnabled", Value.fromBoolean(value));
  }
}
