#######################
## Timeseries events ##
#######################

# Generic activity stream events for history of actions including primary and secodnary sales actions & triggers
# Used for listing out token history on the token pages
type TokenEvent @entity {
    id: ID!                     # Composite key made form multiple items
    name: String!
    token: Token!
    edition: Edition!
    buyer: Collector
    bidder: Collector
    currentOwner: Collector
    ethValue: BigDecimal!
    timestamp: BigInt!
    transactionHash: Bytes!
}

# Token events for transfers
type TransferEvent @entity {
    id: ID!
    from: Bytes! # address
    to: Bytes! # address
    tokenId: BigInt!
    edition: Edition!
    timestamp: BigInt!
    transactionHash: Bytes!
}

# Edition primary sale auction events
type AuctionEvent @entity {
    id: ID!
    edition: Edition!
    name: String!
    bidder: Bytes!
    caller: Bytes!
    timestamp: BigInt!
    ethValue: BigDecimal!
    transactionHash: Bytes!
}


type ActivityEvent @entity {
    id: ID!
    type: String!               # Token or Edition
    eventType: String!          # Event types e.g. ['EditionCreated', 'Purchase', 'BidPlaced', 'BidAccepted', 'BidIncreased', 'BidRejected', 'BidWithdrawn']
    edition: Edition!           # All events relate to an edition
    token: Token                # (nullable) the token this relates to
    # accounts
    creator: Bytes!             # the original edition creator
    creatorCommission: BigInt!  # % recieved as creator - only valid is event has value
    collaborator: Bytes        # (nullable) the original edition creator collaborator
    collaboratorCommission: BigInt # (nullable) % recieved as creator - only valid is event has value
    triggeredBy: Bytes!         # who fired the transaction
    buyer: Bytes                # (nullable) the buyer
    seller: Bytes               # (nullable) the seller
    # technicals
    eventValueInWei: BigInt     # (nullable) the WEI value
    transactionHash: Bytes!     # the traneaction
    timestamp: BigInt!          # the block confirmation time
}

# Rolled up counts for a given day
type Day @entity {
    id: ID!
    date: String!
    transferCount: BigInt!
    editionsCount: BigInt!

    # Bid/offer counts and values (primary & secondary)
    bidsAcceptedCount: BigInt! # Offers accepted
    bidsPlacedCount: BigInt! # Offers made
    bidsRejectedCount: BigInt! # Offers reject
    bidsWithdrawnCount: BigInt!
    bidsIncreasedCount: BigInt!
    totalValuePlaceInBids: BigDecimal!
    totalValueCycledInBids: BigDecimal!

    # Secondary sales value in ETH today
    secondarySalesValue: BigDecimal!

    # Sales/gifting counts and values
    issuedCount: BigInt!
    salesCount: BigInt!

    totalValueInEth: BigDecimal!
    highestValueInEth: BigDecimal!
    highestValueToken: Token

    issued: [Token!]!
    editions: [Edition!]!
}

###################
## Main entities ##
###################

# A token and its details
type Token @entity {
    id: ID!
    tokenId: BigInt!
    transferCount: BigInt!
    editionNumber: BigInt!
    edition: Edition!
    tokenURI: String!
    metadata: MetaData
    birthTimestamp: BigInt!             # initial transfer from zero address
    primaryValueInEth: BigDecimal!      # when it sold from an edition on KO
    totalPurchaseValue: BigDecimal!     # tally of all purchases (primary & secondary)
    totalPurchaseCount: BigInt!         # tally of the number of purchases (primary & secondary)
    lastSalePriceInEth: BigDecimal!     # known last sale if we capture it (primary & secondary)
    lastTransferTimestamp: BigInt!      # updated on ever Transfer
    currentOwner: Collector             # the current owner
    allOwners: [Collector!]!            # list (set) of all unique owners
    transfers: [TransferEvent!]!        # total number of token transfers made
    tokenEvents: [TokenEvent!]!         # list of token events siuch as secondary sales and transfers
    openOffer: TokenOffer,              # current top active offer on a token
    currentTopBidder: Bytes             # current active top bidder on the secondary market for this token
    artistAccount: Bytes! # address
    editionTotalAvailable: BigInt!
    editionActive: Boolean!


    ## Token secondary market
    isListed: Boolean!
    listPrice: BigDecimal
    lister: Collector
    listingTimestamp: BigInt
}

type ListedToken @entity { #For Token Secondary market
    id: ID!

    listPrice: BigDecimal!
    lister: Collector!
    listingTimestamp: BigInt!
    seriesNumber: BigInt # i.e. edition no. in the series i.e. #10 from the an edition of 10
    isFirstEdition: Boolean # i.e. token number 1 from edition of 10
    isLastEdition: Boolean # i.e. token number 10 from edition of 10
    isGenesisEdition: Boolean # i.e. the first artwork from an artist

    #metadata fields flattened for search
    metadataName: String!
    metadataArtist: String!
    metadataArtistAccount: String!
    metadataTagString: String!
    primaryAssetShortType: String!
    primaryAssetActualType: String!

    fullToken: Token!
}

type _Schema_
@fulltext(
    name: "listedTokenSearch",
    language: en
    algorithm: rank,
    include: [
        {
            entity: "ListedToken",
            fields: [
                { name: "metadataName" },
                { name: "metadataArtist" },
                { name: "metadataArtistAccount" },
                { name: "metadataTagString" },
                { name: "primaryAssetShortType" },
                { name: "primaryAssetActualType" },
            ]
        }
    ]
)
@fulltext(
    name: "editionSearch",
    language: en
    algorithm: rank,
    include: [
        {
            entity: "Edition",
            fields: [
                { name: "metadataName" },
                { name: "metadataArtist" },
                { name: "metadataArtistAccount" },
                { name: "metadataTagString" },
                { name: "primaryAssetShortType" },
                { name: "primaryAssetActualType" },
            ]
        }
    ]
)

# A token/editions and its meta data
type Edition @entity {
    id: ID!
    editionNmber: BigInt! # edition no. as Bigint
    editionType: BigInt!
    editionData: Bytes # bytes32
    startDate: BigInt!
    endDate: BigInt!
    createdTimestamp: BigInt!
    tokenIds: [BigInt!]!
    tokenURI: String!
    artistAccount: Bytes! # address
    artistCommission: BigInt!
    optionalCommissionAccount: Bytes # address
    optionalCommissionRate: BigInt
    collaborators: [Bytes!]!
    priceInWei: BigInt!
    offersOnly: Boolean!
    totalSupply: BigInt!
    totalAvailable: BigInt!
    remainingSupply: BigInt!
    totalSold: BigInt! # sold = purchase/bid accepted with price > 0
    sales: [Token!]!
    #gifts: [Token!]! - can we work this out by subtracting sales against issued token numbers, difference is the gifted amount
    totalEthSpentOnEdition: BigDecimal!,
    active: Boolean!
    metadata: MetaData

    # START: freetext search fields
    metadataName: String!
    metadataArtist: String!
    metadataTagString: String!
    metadataArtistAccount: String!
    primaryAssetShortType: String # null-able leading mime-type field i.e. image or video etc
    primaryAssetActualType: String # null-able ending mime-type field e.g. mp4, gif, png etc
    # END: freetext search fields

    auctionEnabled: Boolean!
    activeBid: AuctionEvent # if present, an active bid should be open
    biddingHistory: [AuctionEvent!]!
    transfers: [TransferEvent!]! # total number of token transfers made for all tokens from the edition
    allOwners: [Collector]! # list (set) of all unique owners for all tokens
    currentOwners: [Collector!]! # Current set of owners for this edition
    primaryOwners: [Collector!]! # Owners (set) when sold in primary sale
    isGenesisEdition: Boolean! # set true if edition is an artists first edition
    hasCoverImage: Boolean! # set to true if non-image asset with cover image
}

# A token/editions and its meta data
type MetaData @entity {
    id: ID!
    name: String
    description: String

    image: String
    # only added july-2020
    image_type: String
    image_size_in_bytes: BigInt

    # optional - only added july-2020
    cover_image: String
    cover_image_type: String
    cover_image_size_in_bytes: BigInt
    animation_url: String

    # optional - only added Jan-21
    image_sphere: Boolean

    scarcity: String
    artist: String
    tags: [String!]
}

# Single high level entity capturing the top offer on the secondary marketplace
type TokenOffer @entity {
    id: ID!
    token: Token!
    edition: Edition!
    ownerAtTimeOfBid: Collector!
    bidder: Collector!
    ethValue: BigDecimal!
    timestamp: BigInt!
}

# Encapsulates all offers either on editions or tokens
type Offer @entity {
    id: ID!                         # edition ID or token ID
    type: String!                   # either Token or Edition
    token: Token                    # nullable token, as editions dont have tokens attached
    edition: Edition!               # All offers must be from an edition
    currentOwner: Collector!        # This is either the token holder or the edition artist
    bidder: Collector!              # Who is making the bid
    ethValue: BigDecimal!
    weiValue: BigInt!
    timestamp: BigInt!
    transactionHash: Bytes!
    isActive: Boolean!              # Only active offers can be seen in the UI
    secondaryMarketVersion: String  # helps denote what contract version the offer is against
}

##########################
## Accountable entities ##
##########################

# An artists who has created editions/tokens
type Artist @entity {
    id: ID!

    address: Bytes! # address
    name: String

    editionsCount: BigInt!

    supply: BigInt!

    issuedCount: BigInt!
    salesCount: BigInt!

    totalValueInEth: BigDecimal!

    highestSaleValueInEth: BigDecimal!
    highestSaleToken: Token

    firstEdition: Edition
    firstEditionTimestamp: BigInt!

    lastEdition: Edition
    lastEditionTimestamp: BigInt!

    # FIXME handle secondary sales payments
}

# A single collector who has at sometime held a KO asset
type Collector @entity {
    id: ID! # toString for address
    address: Bytes! # address

    firstSeen: BigInt!
    firstPurchaseTimeStamp: BigInt!
    lastPurchaseTimeStamp: BigInt!

    # Primary sales counts
    primaryPurchaseCount: BigInt!
    primaryPurchaseEthSpent: BigDecimal!

    # Secondary sales counts
    secondarySaleCount: BigInt!
    secondarySaleEthTotal: BigDecimal!
    secondaryPurchaseCount: BigInt!
    secondaryPurchaseEthSpent: BigDecimal!

    # Primary & secondary sales counts
    totalPurchaseCount: BigInt!
    totalPurchaseEthSpent: BigDecimal!
}
